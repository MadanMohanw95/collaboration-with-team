private async Task OnWizardCompleted(Dictionary<string, object> results)
{
    // Extract contact and contact details normally
    Contact contact = results["Contact"] as Contact;
    ContactDetail details = results["Contact Details"] as ContactDetail;

    // Extract addresses and contact addresses tuple safely
    if (!results.TryGetValue("Addresses", out var addressObj) || addressObj == null)
    {
        // Addresses missing, exit early
        return;
    }

    // Try casting as tuple
    if (!(addressObj is ValueTuple<List<Address>, List<ContactAddress>> addressData))
    {
        // Unexpected data type, exit early or throw/log error
        return;
    }

    List<Address> addresses = addressData.Item1 ?? new List<Address>();
    List<ContactAddress> contactAddresses = addressData.Item2 ?? new List<ContactAddress>();

    if (contact == null || details == null || addresses.Count == 0 || contactAddresses.Count == 0)
    {
        // Required data missing, exit early
        return;
    }

    BaseResponseModel responseModel = new BaseResponseModel();

    if (ActionType == ActionTypes.Add)
    {
        contact.IsActive = true;
        responseModel = await apiClient.Add<BaseResponseModel, Contact>(contact);
        if (responseModel != null && responseModel.Success)
        {
            var insertedContact = JsonConvert.DeserializeObject<Contact>(responseModel.Data.ToString());

            details.ContactId = insertedContact.ContactId;
            details.IsActive = true;
            responseModel = await apiClient.Add<BaseResponseModel, ContactDetail>(details);
            if (responseModel != null && responseModel.Success)
            {
                var insertedDetail = JsonConvert.DeserializeObject<ContactDetail>(responseModel.Data.ToString());

                var tasks = addresses.Select(async (address, idx) =>
                {
                    address.IsActive = true;
                    var addressResponse = await apiClient.Add<BaseResponseModel, Address>(address);
                    if (addressResponse != null && addressResponse.Success)
                    {
                        var insertedAddress = JsonConvert.DeserializeObject<Address>(addressResponse.Data.ToString());

                        // Use corresponding ContactAddress with same index
                        var contactAddress = contactAddresses.ElementAtOrDefault(idx) ?? new ContactAddress();

                        contactAddress.ContactId = insertedContact.ContactId;
                        contactAddress.ContactDetailId = insertedDetail.ContactDetailId;
                        contactAddress.AddressId = insertedAddress.AddressId;
                        contactAddress.IsActive = true;
                        contactAddress.ModifiedBy = User?.UserName;

                        var contactAddressResponse = await apiClient.Add<BaseResponseModel, ContactAddress>(contactAddress);
                        if (contactAddressResponse == null || !contactAddressResponse.Success)
                        {
                            // Handle ContactAddress insert failure (log or throw)
                        }
                    }
                    else
                    {
                        // Handle Address insert failure (log or throw)
                    }
                });

                await Task.WhenAll(tasks);
            }
            else
            {
                // Handle ContactDetail insert failure
            }
        }
        else
        {
            // Handle Contact insert failure
        }
    }
    else if (ActionType == ActionTypes.Update)
    {
        // Handle update logic here similarly
    }
}
